{"ast":null,"code":"import _asyncToGenerator from \"/Users/ivangarciaparras/Git/ivan-garcia-parras/homebridge-eufy-legacy/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nexport let AccessoryService = /*#__PURE__*/(() => {\n  class AccessoryService {\n    getChargingStatus(sn) {\n      return _asyncToGenerator(function* () {\n        return window.homebridge.request('/getChargingStatus', sn);\n      })();\n    }\n\n    setExperimentalRTSPStatus(sn, value) {\n      return _asyncToGenerator(function* () {\n        return window.homebridge.request('/setExperimentalRTSP', {\n          sn: sn,\n          value: value\n        });\n      })();\n    }\n\n    getExperimentalRTSPStatus(sn) {\n      return _asyncToGenerator(function* () {\n        return window.homebridge.request('/getExperimentalRTSPStatus', sn);\n      })();\n    }\n\n    getStationsCamerasMapping() {\n      return _asyncToGenerator(function* () {\n        return window.homebridge.request('/getStationDeviceMapping');\n      })();\n    }\n\n    getCamerasOnSameStation(sn, ignoredDevices = []) {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        try {\n          const mapping = yield _this.getStationsCamerasMapping();\n\n          for (const devices of Object.values(mapping)) {\n            if (Array.isArray(devices) && devices.indexOf(sn) > -1) {\n              const result = [sn];\n\n              for (const device of devices) {\n                if (device !== sn && ignoredDevices.indexOf(device) === -1) {\n                  result.push(device);\n                }\n              }\n\n              return Promise.resolve(result);\n            }\n          } // sn was not found in mapping\n\n\n          throw new Error('no valid station - devices mapping was found');\n        } catch (err) {\n          return Promise.reject(err);\n        }\n      })();\n    }\n\n  }\n\n  AccessoryService.ɵfac = function AccessoryService_Factory(t) {\n    return new (t || AccessoryService)();\n  };\n\n  AccessoryService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AccessoryService,\n    factory: AccessoryService.ɵfac,\n    providedIn: 'root'\n  });\n  return AccessoryService;\n})();","map":null,"metadata":{},"sourceType":"module"}