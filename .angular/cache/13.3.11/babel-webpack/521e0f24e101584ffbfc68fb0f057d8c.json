{"ast":null,"code":"import { ConfigOptionsInterpreter } from '../config-options-interpreter';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../plugin.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/common\";\n\nfunction ExperimentalModeComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵtext(1, \" Please be advised that we are not reliable for any side effects occur while you try experimental settings.\");\n    i0.ɵɵelement(2, \"p\");\n    i0.ɵɵtext(3, \" Also take care to deactivate every experimental setting before disabling 'Experimental Mode'. Just disabling this option, \");\n    i0.ɵɵelementStart(4, \"b\");\n    i0.ɵɵtext(5, \"will not\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(6, \" return your devices to the default configuration! (e.g. if you enable rtsp streaming on a doorbell, disable it on the device settings before disabling 'Experimental Mode'). \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport let ExperimentalModeComponent = /*#__PURE__*/(() => {\n  class ExperimentalModeComponent extends ConfigOptionsInterpreter {\n    constructor(pluginService) {\n      super(pluginService);\n      /** Customize from here */\n\n      /** updateConfig() will overwrite any settings that you'll provide */\n\n      /** Don't try and 'append'/'push' to arrays this way - add a custom method instead */\n\n      /** see config option to ignore devices as example */\n\n      /** updateConfig() takes an optional second parameter to specify the accessoriy for which the setting is changed */\n\n      this.value = false;\n    }\n\n    ngOnInit() {\n      this.readValue();\n    }\n\n    readValue() {\n      if (Object.prototype.hasOwnProperty.call(this.config, 'experimentalMode')) {\n        this.value = this.config['experimentalMode'];\n      }\n    }\n\n    update() {\n      this.updateConfig({\n        experimentalMode: this.value\n      });\n    }\n\n  }\n\n  ExperimentalModeComponent.ɵfac = function ExperimentalModeComponent_Factory(t) {\n    return new (t || ExperimentalModeComponent)(i0.ɵɵdirectiveInject(i1.PluginService));\n  };\n\n  ExperimentalModeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ExperimentalModeComponent,\n    selectors: [[\"app-experimental-mode\"]],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 10,\n    vars: 2,\n    consts: [[1, \"settingsItem\", \"row\", \"p-3\"], [1, \"d-flex\", \"justify-content-between\", \"align-items-center\", \"mb-2\"], [1, \"form-check\", \"form-switch\"], [\"type\", \"checkbox\", \"role\", \"switch\", \"id\", \"flexSwitchCheckDefault\", 1, \"form-check-input\", 3, \"ngModel\", \"ngModelChange\", \"change\"], [\"class\", \"alert alert-warning\", \"role\", \"alert\", 4, \"ngIf\"], [\"role\", \"alert\", 1, \"alert\", \"alert-warning\"]],\n    template: function ExperimentalModeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"span\");\n        i0.ɵɵtext(3, \"Experimental Mode\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 2)(5, \"input\", 3);\n        i0.ɵɵlistener(\"ngModelChange\", function ExperimentalModeComponent_Template_input_ngModelChange_5_listener($event) {\n          return ctx.value = $event;\n        })(\"change\", function ExperimentalModeComponent_Template_input_change_5_listener() {\n          return ctx.update();\n        });\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtemplate(6, ExperimentalModeComponent_div_6_Template, 7, 0, \"div\", 4);\n        i0.ɵɵelementStart(7, \"small\")(8, \"i\");\n        i0.ɵɵtext(9, \" When enabled, the plugin allows you to change specific behaviour of some eufy devices. For example you can try to enable RTSP streaming on Doorbells (which usually don't support RTSP streaming). \");\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngModel\", ctx.value);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.value);\n      }\n    },\n    directives: [i2.CheckboxControlValueAccessor, i2.NgControlStatus, i2.NgModel, i3.NgIf],\n    encapsulation: 2\n  });\n  return ExperimentalModeComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}