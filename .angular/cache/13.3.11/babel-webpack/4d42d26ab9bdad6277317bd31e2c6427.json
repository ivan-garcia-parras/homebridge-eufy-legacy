{"ast":null,"code":"import _asyncToGenerator from \"/Users/ivangarciaparras/Git/ivan-garcia-parras/homebridge-eufy-legacy/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { fromEvent } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let PluginService = /*#__PURE__*/(() => {\n  class PluginService extends EventTarget {\n    constructor() {\n      super();\n      this.stations = [];\n      this.devices = [];\n      this.accessories$ = fromEvent(window.homebridge, 'addAccessory');\n      this.init();\n    }\n\n    init() {\n      this.accessories$.subscribe(event => {\n        this.loadStoredAccessories();\n      });\n      this.loadStoredAccessories();\n    }\n\n    getStations() {\n      return this.stations;\n    }\n\n    getDevices() {\n      return this.devices;\n    }\n\n    getStation(uniqueId) {\n      return this.stations.find(s => s.uniqueId === uniqueId);\n    }\n\n    getDevice(uniqueId) {\n      return this.devices.find(d => d.uniqueId === uniqueId);\n    }\n\n    loadStoredAccessories() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        try {\n          const accessories = yield window.homebridge.request('/storedAccessories');\n          accessories.forEach(accessory => {\n            _this.addAccessory(accessory);\n          });\n\n          if (accessories.length !== 0) {\n            _this.dispatchEvent(new Event('newAccessories'));\n          }\n\n          return Promise.resolve(accessories.length !== 0);\n        } catch (err) {\n          return Promise.reject(err);\n        }\n      })();\n    }\n\n    addAccessory(accessory) {\n      const targetArray = accessory.station ? this.stations : this.devices;\n\n      if (!targetArray.find(a => a.uniqueId === accessory.uniqueId)) {\n        targetArray.push(accessory);\n      }\n    }\n\n    getConfig() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        if (_this2.config) {\n          return Promise.resolve(_this2.config);\n        }\n\n        return _this2.getPlatformConfig();\n      })();\n    }\n\n    updateConfig(config, save) {\n      var _this3 = this;\n\n      return _asyncToGenerator(function* () {\n        try {\n          yield window.homebridge.updatePluginConfig([config]);\n          _this3.config = config;\n\n          if (save) {\n            yield window.homebridge.savePluginConfig();\n          }\n\n          _this3.dispatchEvent(new Event('configChanged'));\n        } catch (err) {\n          console.log('There was an error updating the credentials in your config: ' + err);\n        }\n      })();\n    }\n\n    getPlatformConfig() {\n      var _this4 = this;\n\n      return _asyncToGenerator(function* () {\n        // always use the first platform config since there is only one supported\n        try {\n          const configs = yield window.homebridge.getPluginConfig();\n\n          if (configs.length > 0) {\n            _this4.config = configs[0];\n            _this4.config['platform'] = 'EufyLegacy';\n            return Promise.resolve(configs[0]);\n          } else {\n            return Promise.reject('Could not get Platform config');\n          }\n        } catch (err) {\n          return Promise.reject(err);\n        }\n      })();\n    }\n\n    getCachedName(accessory) {\n      return _asyncToGenerator(function* () {\n        const cachedAccessories = yield window.homebridge.getCachedAccessories();\n        let name = undefined;\n        cachedAccessories.forEach(cachedAccessory => {\n          if (cachedAccessory.context && cachedAccessory.context['device'] && cachedAccessory.context['device']['uniqueId'] === accessory.uniqueId && cachedAccessory.context['device']['station'] === accessory.station) {\n            name = cachedAccessory.context['device']['displayName'];\n          }\n        });\n        return Promise.resolve(name);\n      })();\n    }\n\n  }\n\n  PluginService.ɵfac = function PluginService_Factory(t) {\n    return new (t || PluginService)();\n  };\n\n  PluginService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PluginService,\n    factory: PluginService.ɵfac,\n    providedIn: 'root'\n  });\n  return PluginService;\n})();","map":null,"metadata":{},"sourceType":"module"}