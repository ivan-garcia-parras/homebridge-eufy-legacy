{"ast":null,"code":"import { DEFAULT_CONFIG_VALUES } from '../../util/default-config-values';\nimport { ConfigOptionsInterpreter } from '../config-options-interpreter';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../plugin.service\";\nimport * as i2 from \"@angular/forms\";\nexport let SyncStationModesComponent = /*#__PURE__*/(() => {\n  class SyncStationModesComponent extends ConfigOptionsInterpreter {\n    constructor(pluginService) {\n      super(pluginService);\n      /** Customize from here */\n\n      /** updateConfig() will overwrite any settings that you'll provide */\n\n      /** Don't try and 'append'/'push' to arrays this way - add a custom method instead */\n\n      /** see config option to ignore devices as example */\n\n      /** updateConfig() takes an optional second parameter to specify the accessoriy for which the setting is changed */\n\n      this.value = DEFAULT_CONFIG_VALUES.syncStationModes;\n    }\n\n    ngOnInit() {\n      this.readValue();\n    }\n\n    readValue() {\n      if (Object.prototype.hasOwnProperty.call(this.config, 'syncStationModes')) {\n        this.value = this.config['syncStationModes'];\n      }\n    }\n\n    update() {\n      this.updateConfig({\n        syncStationModes: this.value\n      });\n    }\n\n  }\n\n  SyncStationModesComponent.ɵfac = function SyncStationModesComponent_Factory(t) {\n    return new (t || SyncStationModesComponent)(i0.ɵɵdirectiveInject(i1.PluginService));\n  };\n\n  SyncStationModesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SyncStationModesComponent,\n    selectors: [[\"app-sync-station-modes\"]],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 9,\n    vars: 1,\n    consts: [[1, \"settingsItem\", \"row\", \"p-3\"], [1, \"d-flex\", \"justify-content-between\", \"align-items-center\", \"mb-2\"], [1, \"form-check\", \"form-switch\"], [\"type\", \"checkbox\", \"role\", \"switch\", \"id\", \"flexSwitchCheckDefault\", 1, \"form-check-input\", 3, \"ngModel\", \"ngModelChange\", \"change\"]],\n    template: function SyncStationModesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"span\");\n        i0.ɵɵtext(3, \"Sync Station Modes\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 2)(5, \"input\", 3);\n        i0.ɵɵlistener(\"ngModelChange\", function SyncStationModesComponent_Template_input_ngModelChange_5_listener($event) {\n          return ctx.value = $event;\n        })(\"change\", function SyncStationModesComponent_Template_input_change_5_listener() {\n          return ctx.update();\n        });\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(6, \"small\")(7, \"i\");\n        i0.ɵɵtext(8, \" If enabled every station will be synced when changing the guard mode. So set one station to 'Away' and every other station will also be set to this mode. \");\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngModel\", ctx.value);\n      }\n    },\n    directives: [i2.CheckboxControlValueAccessor, i2.NgControlStatus, i2.NgModel],\n    encapsulation: 2\n  });\n  return SyncStationModesComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}