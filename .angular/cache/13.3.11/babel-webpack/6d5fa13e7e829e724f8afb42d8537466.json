{"ast":null,"code":"import _asyncToGenerator from \"/Users/ivangarciaparras/Git/ivan-garcia-parras/homebridge-eufy-legacy/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nexport class ConfigOptionsInterpreter {\n  constructor(pluginService) {\n    this.pluginService = pluginService;\n    this.config = {};\n    this.pluginService.getConfig().then(config => {\n      this.config = config;\n    }).catch(err => console.log('Could not get config in config interpreter: ' + err));\n  }\n\n  getCameraConfig(uniqueId) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const config = yield _this.pluginService.getConfig();\n\n      if (Array.isArray(config['cameras'])) {\n        return Promise.resolve(config['cameras'].find(cc => cc['serialNumber'] === uniqueId));\n      } else {\n        return Promise.resolve(undefined);\n      }\n    })();\n  }\n\n  getStationConfig(uniqueId) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const config = yield _this2.pluginService.getConfig();\n\n      if (Array.isArray(config['stations'])) {\n        return Promise.resolve(config['stations'].find(sc => sc['serialNumber'] === uniqueId));\n      } else {\n        return Promise.resolve(undefined);\n      }\n    })();\n  }\n\n  updateConfig(options, accessory) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      let config = yield _this3.pluginService.getConfig();\n\n      if (!accessory) {\n        config = Object.assign(Object.assign({}, config), options);\n      }\n\n      if (accessory && accessory.station === false) {\n        if (!Array.isArray(config['cameras'])) {\n          config['cameras'] = [];\n        }\n\n        let cameraConfigIndex = -1;\n        config['cameras'].forEach((cc, i) => {\n          if (cc.serialNumber === accessory.uniqueId) {\n            cameraConfigIndex = i;\n          }\n        });\n\n        if (cameraConfigIndex >= 0) {\n          // update cameraConfig for this device\n          config['cameras'][cameraConfigIndex] = Object.assign(Object.assign({}, config['cameras'][cameraConfigIndex]), options);\n        } else {\n          // cameraConfig for this device didn't exist yet\n          config['cameras'].push(Object.assign({\n            serialNumber: accessory.uniqueId\n          }, options));\n        }\n      } else if (accessory && accessory.station === true) {\n        if (!Array.isArray(config['stations'])) {\n          config['stations'] = [];\n        }\n\n        let stationConfigIndex = -1;\n        config['stations'].forEach((sc, i) => {\n          if (sc.serialNumber === accessory.uniqueId) {\n            stationConfigIndex = i;\n          }\n        });\n\n        if (stationConfigIndex >= 0) {\n          // update stationConfig for this device\n          config['stations'][stationConfigIndex] = Object.assign(Object.assign({}, config['stations'][stationConfigIndex]), options);\n        } else {\n          // stationConfig for this device didn't exist yet\n          config['stations'].push(Object.assign({\n            serialNumber: accessory.uniqueId\n          }, options));\n        }\n      }\n\n      _this3.pluginService.updateConfig(config);\n    })();\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}