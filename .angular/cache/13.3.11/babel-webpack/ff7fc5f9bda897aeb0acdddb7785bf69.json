{"ast":null,"code":"import { ConfigOptionsInterpreter } from '../config-options-interpreter';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../app/plugin.service\";\nimport * as i2 from \"@angular/forms\";\nexport let LivestreamDurationSecondsComponent = /*#__PURE__*/(() => {\n  class LivestreamDurationSecondsComponent extends ConfigOptionsInterpreter {\n    constructor(pluginService) {\n      super(pluginService);\n      /** Customize from here */\n\n      /** updateConfig() will overwrite any settings that you'll provide */\n\n      /** Don't try and 'append'/'push' to arrays this way - add a custom method instead */\n\n      /** see config option to ignore devices as example */\n\n      /** updateConfig() takes an optional second parameter to specify the accessoriy for which the setting is changed */\n\n      this.value = 30;\n      this.inputIsInvalid = false;\n    }\n\n    ngOnInit() {\n      this.readValue();\n    }\n\n    readValue() {\n      if (Object.prototype.hasOwnProperty.call(this.config, 'CameraMaxLivestreamDuration')) {\n        this.value = this.config['CameraMaxLivestreamDuration'];\n      }\n    }\n\n    update() {\n      this.inputIsInvalid = false;\n\n      if (!this.value || this.value < 0) {\n        this.inputIsInvalid = true;\n      }\n\n      if (!this.inputIsInvalid) {\n        this.updateConfig({\n          CameraMaxLivestreamDuration: this.value\n        });\n      }\n    }\n\n  }\n\n  LivestreamDurationSecondsComponent.ɵfac = function LivestreamDurationSecondsComponent_Factory(t) {\n    return new (t || LivestreamDurationSecondsComponent)(i0.ɵɵdirectiveInject(i1.PluginService));\n  };\n\n  LivestreamDurationSecondsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LivestreamDurationSecondsComponent,\n    selectors: [[\"app-livestream-duration-seconds\"]],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 13,\n    vars: 2,\n    consts: [[1, \"settingsItem\", \"row\", \"p-3\"], [1, \"d-flex\", \"flex-column\", \"flex-sm-row\", \"justify-content-between\", \"align-items-start\", \"align-items-sm-center\", \"mb-2\"], [1, \"col-12\", \"col-sm-4\"], [1, \"input-group\", \"input-group-sm\"], [\"type\", \"number\", \"aria-label\", \"Polling interval minutes\", \"aria-describedby\", \"basic-addon2\", 3, \"ngModel\", \"ngModelChange\", \"change\"], [1, \"input-group-append\"], [\"id\", \"basic-addon2\", 1, \"input-group-text\"]],\n    template: function LivestreamDurationSecondsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"span\");\n        i0.ɵɵtext(3, \"Maximum Livestream Duration\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 2)(5, \"div\", 3)(6, \"input\", 4);\n        i0.ɵɵlistener(\"ngModelChange\", function LivestreamDurationSecondsComponent_Template_input_ngModelChange_6_listener($event) {\n          return ctx.value = $event;\n        })(\"change\", function LivestreamDurationSecondsComponent_Template_input_change_6_listener() {\n          return ctx.update();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 5)(8, \"span\", 6);\n        i0.ɵɵtext(9, \"seconds\");\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵelementStart(10, \"small\")(11, \"i\");\n        i0.ɵɵtext(12, \" Time in second before ending the livestream automatically (longer livestreams imply shorter batterylife) \");\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngModel\", ctx.value);\n        i0.ɵɵattribute(\"class\", ctx.inputIsInvalid ? \"form-control text-end is-invalid\" : \"form-control text-end\");\n      }\n    },\n    directives: [i2.NumberValueAccessor, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgModel],\n    encapsulation: 2\n  });\n  return LivestreamDurationSecondsComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}