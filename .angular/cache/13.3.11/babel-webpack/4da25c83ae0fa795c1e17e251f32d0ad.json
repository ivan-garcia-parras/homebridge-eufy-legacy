{"ast":null,"code":"import _asyncToGenerator from \"/Users/ivangarciaparras/Git/ivan-garcia-parras/homebridge-eufy-legacy/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./plugin.service\";\nexport let LoginService = /*#__PURE__*/(() => {\n  class LoginService {\n    constructor(pluginService) {\n      this.pluginService = pluginService;\n    }\n\n    getCredentials() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        try {\n          const config = yield _this.pluginService.getConfig();\n\n          if (!config['username'] || !config['password']) {\n            return Promise.reject('no full credentials in config');\n          }\n\n          return Promise.resolve({\n            username: config['username'],\n            password: config['password'],\n            country: config['country'] ? config['country'] : 'US',\n            deviceName: config['deviceName']\n          });\n        } catch (err) {\n          return Promise.reject('no config');\n        }\n      })();\n    }\n\n    login(options) {\n      return _asyncToGenerator(function* () {\n        try {\n          const result = yield window.homebridge.request('/login', options);\n          return Promise.resolve(result);\n        } catch (err) {\n          return Promise.reject(err);\n        }\n      })();\n    }\n\n    updateConfigCredentials(credentials) {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        let config = {};\n\n        try {\n          config = yield _this2.pluginService.getConfig();\n        } catch (err) {\n          console.log('Could not get credentials from config: ' + err);\n        }\n\n        config['username'] = credentials.username;\n        config['password'] = credentials.password;\n        config['country'] = credentials.country;\n        config['deviceName'] = credentials.deviceName;\n        yield _this2.pluginService.updateConfig(config, true);\n      })();\n    }\n\n  }\n\n  LoginService.ɵfac = function LoginService_Factory(t) {\n    return new (t || LoginService)(i0.ɵɵinject(i1.PluginService));\n  };\n\n  LoginService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoginService,\n    factory: LoginService.ɵfac,\n    providedIn: 'root'\n  });\n  return LoginService;\n})();","map":null,"metadata":{},"sourceType":"module"}