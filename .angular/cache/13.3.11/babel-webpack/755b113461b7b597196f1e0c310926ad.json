{"ast":null,"code":"import _asyncToGenerator from \"/Users/ivangarciaparras/Git/ivan-garcia-parras/homebridge-eufy-legacy/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ConfigOptionsInterpreter } from '../config-options-interpreter';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../plugin.service\";\nimport * as i2 from \"../../accessory.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/common\";\n\nfunction ExperimentalRtspComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" There was an error setting the RTSP status: \", ctx_r0.error.message, \" \");\n  }\n}\n\nfunction ExperimentalRtspComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 9);\n    i0.ɵɵtext(1, \" To utilize RTSP streaming, you'll also have to enable the RTSP setting above. \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ExperimentalRtspComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Current RTSP state of this device:\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ExperimentalRtspComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10)(1, \"span\", 11);\n    i0.ɵɵtext(2, \"Loading...\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction ExperimentalRtspComponent_b_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"b\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r4.state ? \"On\" : \"Off\");\n  }\n}\n\nfunction ExperimentalRtspComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"RTSP url for this device:\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport let ExperimentalRtspComponent = /*#__PURE__*/(() => {\n  class ExperimentalRtspComponent extends ConfigOptionsInterpreter {\n    constructor(pluginService, accessoryService) {\n      super(pluginService);\n      this.accessoryService = accessoryService;\n      this.value = false;\n      this.rtspSetting = false;\n      this.waiting = false;\n    }\n\n    ngOnInit() {\n      this.readValue();\n      this.pluginService.addEventListener('configChanged', () => this.readValue()); // look for changes of talkback setting\n    }\n\n    readValue() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        var _a;\n\n        const config = yield _this.getCameraConfig(((_a = _this.accessory) === null || _a === void 0 ? void 0 : _a.uniqueId) || '');\n\n        if (config && Object.prototype.hasOwnProperty.call(config, 'experimentalRTSP')) {\n          _this.value = config['experimentalRTSP'];\n        }\n\n        if (config && Object.prototype.hasOwnProperty.call(config, 'rtsp')) {\n          _this.rtspSetting = config['rtsp'];\n        }\n\n        _this.getCurrentRTSPValues();\n      })();\n    }\n\n    getCurrentRTSPValues() {\n      if (this.accessory) {\n        this.accessoryService.getExperimentalRTSPStatus(this.accessory.uniqueId).then(result => {\n          this.waiting = false;\n          this.state = result.state;\n          this.url = result.url;\n        });\n      }\n    }\n\n    update() {\n      this.updateConfig({\n        experimentalRTSP: this.value\n      }, this.accessory);\n\n      if (this.accessory) {\n        this.waiting = true;\n        this.accessoryService.setExperimentalRTSPStatus(this.accessory.uniqueId, this.value).then(url => {\n          this.rtspUrl = url;\n          this.getCurrentRTSPValues();\n        }).catch(err => this.error = err);\n      }\n    }\n\n  }\n\n  ExperimentalRtspComponent.ɵfac = function ExperimentalRtspComponent_Factory(t) {\n    return new (t || ExperimentalRtspComponent)(i0.ɵɵdirectiveInject(i1.PluginService), i0.ɵɵdirectiveInject(i2.AccessoryService));\n  };\n\n  ExperimentalRtspComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ExperimentalRtspComponent,\n    selectors: [[\"app-experimental-rtsp\"]],\n    inputs: {\n      accessory: \"accessory\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 20,\n    vars: 8,\n    consts: [[1, \"settingsItem\", \"row\", \"p-3\"], [1, \"d-flex\", \"justify-content-between\", \"align-items-center\", \"mb-2\"], [1, \"form-check\", \"form-switch\"], [\"type\", \"checkbox\", \"role\", \"switch\", \"id\", \"flexSwitchCheckDefault\", 1, \"form-check-input\", 3, \"ngModel\", \"ngModelChange\", \"change\"], [\"class\", \"alert alert-danger\", \"role\", \"alert\", 4, \"ngIf\"], [\"class\", \"alert alert-warning\", \"role\", \"alert\", 4, \"ngIf\"], [4, \"ngIf\"], [\"class\", \"spinner-border spinner-border-sm\", \"role\", \"status\", 4, \"ngIf\"], [\"role\", \"alert\", 1, \"alert\", \"alert-danger\"], [\"role\", \"alert\", 1, \"alert\", \"alert-warning\"], [\"role\", \"status\", 1, \"spinner-border\", \"spinner-border-sm\"], [1, \"sr-only\"]],\n    template: function ExperimentalRtspComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"span\");\n        i0.ɵɵtext(3, \"Enable experimental RTSP streaming capabilities\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 2)(5, \"input\", 3);\n        i0.ɵɵlistener(\"ngModelChange\", function ExperimentalRtspComponent_Template_input_ngModelChange_5_listener($event) {\n          return ctx.value = $event;\n        })(\"change\", function ExperimentalRtspComponent_Template_input_change_5_listener() {\n          return ctx.update();\n        });\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtemplate(6, ExperimentalRtspComponent_div_6_Template, 2, 1, \"div\", 4);\n        i0.ɵɵtemplate(7, ExperimentalRtspComponent_div_7_Template, 2, 0, \"div\", 5);\n        i0.ɵɵelementStart(8, \"div\", 1);\n        i0.ɵɵtemplate(9, ExperimentalRtspComponent_div_9_Template, 2, 0, \"div\", 6);\n        i0.ɵɵtemplate(10, ExperimentalRtspComponent_div_10_Template, 3, 0, \"div\", 7);\n        i0.ɵɵtemplate(11, ExperimentalRtspComponent_b_11_Template, 2, 1, \"b\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"div\", 1);\n        i0.ɵɵtemplate(13, ExperimentalRtspComponent_div_13_Template, 2, 0, \"div\", 6);\n        i0.ɵɵelementStart(14, \"div\");\n        i0.ɵɵtext(15);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(16, \"small\")(17, \"i\");\n        i0.ɵɵtext(18, \" Most devices that don't support RTSP streaming officially have the ability nonetheless. You can try to enable it with this setting.\");\n        i0.ɵɵelement(19, \"br\");\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngModel\", ctx.value);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.error !== undefined);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.value && !ctx.rtspSetting);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.state !== undefined);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.waiting);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.waiting);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.url);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.url);\n      }\n    },\n    directives: [i3.CheckboxControlValueAccessor, i3.NgControlStatus, i3.NgModel, i4.NgIf],\n    encapsulation: 2\n  });\n  return ExperimentalRtspComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}