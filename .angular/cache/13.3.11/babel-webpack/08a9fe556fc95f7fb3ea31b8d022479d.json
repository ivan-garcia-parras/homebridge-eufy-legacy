{"ast":null,"code":"import _asyncToGenerator from \"/Users/ivangarciaparras/Git/ivan-garcia-parras/homebridge-eufy-legacy/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { DEFAULT_CAMERACONFIG_VALUES } from '../../../app/util/default-config-values';\nimport { ChargingStatus } from '../../util/eufy-security-client.utils';\nimport { ConfigOptionsInterpreter } from '../config-options-interpreter';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../app/plugin.service\";\nimport * as i2 from \"../../accessory.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\n\nfunction PeriodicSnapshotRefreshComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtext(1, \" Since your device is battery powered and currently not charging we don't recommend using this setting. The battery life will most likely decrease significantly. \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction PeriodicSnapshotRefreshComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵtext(1, \" Please be advised that since your device is only solar powered we cannot guarantee optimal results with this setting. It might well be, that your battery is depleting faster than it can be recharged by the sun. This depends heavily on your exact use case. \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport let PeriodicSnapshotRefreshComponent = /*#__PURE__*/(() => {\n  class PeriodicSnapshotRefreshComponent extends ConfigOptionsInterpreter {\n    constructor(pluginService, accessoryService) {\n      super(pluginService);\n      this.accessoryService = accessoryService;\n      this.value = DEFAULT_CAMERACONFIG_VALUES.refreshSnapshotIntervalMinutes;\n      this.inputIsInvalid = false;\n      this.chargingStatus = ChargingStatus.PLUGGED;\n    }\n\n    ngOnInit() {\n      this.readValue();\n\n      if (this.accessory) {\n        this.accessoryService.getChargingStatus(this.accessory.uniqueId).then(chargingStatus => this.chargingStatus = chargingStatus);\n      }\n    }\n\n    readValue() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        var _a;\n\n        const config = yield _this.getCameraConfig(((_a = _this.accessory) === null || _a === void 0 ? void 0 : _a.uniqueId) || '');\n\n        if (config && Object.prototype.hasOwnProperty.call(config, 'refreshSnapshotIntervalMinutes')) {\n          _this.value = config['refreshSnapshotIntervalMinutes'];\n        }\n      })();\n    }\n\n    switchSetting() {\n      this.value = this.value === 0 ? 30 : 0;\n      this.update();\n    }\n\n    update() {\n      if (!this.validate()) {\n        return;\n      }\n\n      this.updateConfig({\n        refreshSnapshotIntervalMinutes: this.value\n      }, this.accessory);\n    }\n\n    validate() {\n      this.inputIsInvalid = false;\n\n      if (this.value === null || this.value === undefined || this.value < 5 && this.value !== 0) {\n        this.inputIsInvalid = true;\n      }\n\n      return !this.inputIsInvalid;\n    }\n\n  }\n\n  PeriodicSnapshotRefreshComponent.ɵfac = function PeriodicSnapshotRefreshComponent_Factory(t) {\n    return new (t || PeriodicSnapshotRefreshComponent)(i0.ɵɵdirectiveInject(i1.PluginService), i0.ɵɵdirectiveInject(i2.AccessoryService));\n  };\n\n  PeriodicSnapshotRefreshComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: PeriodicSnapshotRefreshComponent,\n    selectors: [[\"app-periodic-snapshot-refresh\"]],\n    inputs: {\n      accessory: \"accessory\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 27,\n    vars: 5,\n    consts: [[1, \"settingsItem\", \"row\", \"p-3\"], [1, \"d-flex\", \"justify-content-between\", \"align-items-center\", \"mb-2\"], [1, \"form-check\", \"form-switch\"], [\"type\", \"checkbox\", \"role\", \"switch\", \"id\", \"flexSwitchCheckDefault\", 1, \"form-check-input\", 3, \"change\"], [\"class\", \"alert alert-warning\", \"role\", \"alert\", 4, \"ngIf\"], [\"class\", \"alert alert-secondary\", \"role\", \"alert\", 4, \"ngIf\"], [1, \"d-flex\", \"flex-column\", \"flex-sm-row\", \"justify-content-between\", \"align-items-start\", \"align-items-sm-center\", \"mb-2\"], [1, \"col-12\", \"col-sm-4\"], [1, \"input-group\", \"input-group-sm\"], [\"type\", \"number\", \"aria-label\", \"Polling interval minutes\", \"aria-describedby\", \"basic-addon2\", 3, \"ngModel\", \"ngModelChange\", \"change\"], [1, \"input-group-append\"], [\"id\", \"basic-addon2\", 1, \"input-group-text\"], [\"role\", \"alert\", 1, \"alert\", \"alert-warning\"], [\"role\", \"alert\", 1, \"alert\", \"alert-secondary\"]],\n    template: function PeriodicSnapshotRefreshComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"span\");\n        i0.ɵɵtext(3, \"Periodic Snapshot Refresh\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 2)(5, \"input\", 3);\n        i0.ɵɵlistener(\"change\", function PeriodicSnapshotRefreshComponent_Template_input_change_5_listener() {\n          return ctx.switchSetting();\n        });\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtemplate(6, PeriodicSnapshotRefreshComponent_div_6_Template, 2, 0, \"div\", 4);\n        i0.ɵɵtemplate(7, PeriodicSnapshotRefreshComponent_div_7_Template, 2, 0, \"div\", 5);\n        i0.ɵɵelementStart(8, \"div\", 6)(9, \"span\");\n        i0.ɵɵtext(10, \"Refresh Interval\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"div\", 7)(12, \"div\", 8)(13, \"input\", 9);\n        i0.ɵɵlistener(\"ngModelChange\", function PeriodicSnapshotRefreshComponent_Template_input_ngModelChange_13_listener($event) {\n          return ctx.value = $event;\n        })(\"change\", function PeriodicSnapshotRefreshComponent_Template_input_change_13_listener() {\n          return ctx.update();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"div\", 10)(15, \"span\", 11);\n        i0.ɵɵtext(16, \"minutes\");\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵelementStart(17, \"small\")(18, \"i\");\n        i0.ɵɵtext(19, \" This option will force a snapshot to be generated every x minutes. This snapshot will then be used for homekit. So that your snapshots will never be older than this.\");\n        i0.ɵɵelement(20, \"br\");\n        i0.ɵɵtext(21, \" Best used with 'Cloud Snapshots' handling method.\");\n        i0.ɵɵelement(22, \"br\");\n        i0.ɵɵtext(23, \" Every setting below 5 minutes will be discarded due to performance reasons.\");\n        i0.ɵɵelement(24, \"br\");\n        i0.ɵɵelementStart(25, \"b\");\n        i0.ɵɵtext(26, \"Don't use this with the 'Force Refresh Snapshots' method, since it will have negligible effects other than slowing down homebridge and decreasing possible battery life.\");\n        i0.ɵɵelementEnd()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵattribute(\"checked\", ctx.value > 0 ? true : null);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.chargingStatus === 2 && ctx.value > 0);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.chargingStatus === 4 && ctx.value > 0);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngModel\", ctx.value);\n        i0.ɵɵattribute(\"class\", ctx.inputIsInvalid ? \"form-control text-end is-invalid\" : \"form-control text-end\");\n      }\n    },\n    directives: [i3.NgIf, i4.NumberValueAccessor, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgModel],\n    encapsulation: 2\n  });\n  return PeriodicSnapshotRefreshComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}